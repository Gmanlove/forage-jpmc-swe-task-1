diff --git a/client3.py b/client3.py
index 3fc09b7..8f6ab6a 100644
--- a/client3.py
+++ b/client3.py
@@ -28,22 +28,19 @@ QUERY = "http://localhost:8080/query?id={}"
 # 500 server request
 N = 500
 
-
 def getDataPoint(quote):
     """ Produce all the needed values to generate a datapoint """
-    """ ------------- Update this function ------------- """
-    stock = quote['stock']
+    stock = quote['symbol']  # 'stock' changed to 'symbol'
     bid_price = float(quote['top_bid']['price'])
     ask_price = float(quote['top_ask']['price'])
-    price = bid_price
+    price = (bid_price + ask_price) / 2  # Use average of bid and ask prices as the price
     return stock, bid_price, ask_price, price
 
-
 def getRatio(price_a, price_b):
     """ Get ratio of price_a and price_b """
-    """ ------------- Update this function ------------- """
-    return 1
-
+    if price_b == 0:  # Avoid division by zero
+        return
+    return price_a / price_b
 
 # Main
 if __name__ == "__main__":
@@ -52,8 +49,12 @@ if __name__ == "__main__":
         quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
 
         """ ----------- Update to get the ratio --------------- """
-        for quote in quotes:
-            stock, bid_price, ask_price, price = getDataPoint(quote)
-            print("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
-
-        print("Ratio %s" % getRatio(price, price))
+        if len(quotes) >= 2:  # Ensure at least two quotes for calculation
+            stock_a, _, _, price_a = getDataPoint(quotes[0])
+            _, _, _, price_b = getDataPoint(quotes[1])
+            print("Stock A: %s, Price A: %.2f" % (stock_a, price_a))
+            print("Stock B: %s, Price B: %.2f" % (stock_b, price_b))
+            ratio = getRatio(price_a, price_b)
+            print("Ratio: %.2f" % ratio)
+        else:
+            print("Insufficient data for ratio calculation")
diff --git a/client_test.py b/client_test.py
index af2bf26..5a2d802 100644
--- a/client_test.py
+++ b/client_test.py
@@ -1,25 +1,28 @@
 import unittest
-from client3 import getDataPoint
-
-class ClientTest(unittest.TestCase):
-  def test_getDataPoint_calculatePrice(self):
-    quotes = [
-      {'top_ask': {'price': 121.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
-      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
-    ]
-    """ ------------ Add the assertion below ------------ """
-
-  def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
-    quotes = [
-      {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
-      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
-    ]
-    """ ------------ Add the assertion below ------------ """
-
-
-  """ ------------ Add more unit tests ------------ """
-
+from unittest.mock import Mock, patch
+from datafeed_script import getDataPoint, getRatio
 
+class TestDatafeedFunctions(unittest.TestCase):
+    
+    def test_getDataPoint(self):
+        quote = {
+            "symbol": "AAPL",
+            "top_bid": {"price": "150.00"},
+            "top_ask": {"price": "151.00"}
+        }
+        stock, bid_price, ask_price, price = getDataPoint(quote)
+        
+        self.assertEqual(stock, "AAPL")
+        self.assertEqual(bid_price, 150.00)
+        self.assertEqual(ask_price, 151.00)
+        self.assertEqual(price, 150.50)
+    
+    def test_getRatio(self):
+        ratio = getRatio(10, 5)
+        self.assertEqual(ratio, 2)
+        
+        ratio = getRatio(10, 0)
+        self.assertIsNone(ratio)
 
 if __name__ == '__main__':
     unittest.main()
